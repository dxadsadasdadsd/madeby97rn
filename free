-- Load WindUI
local success, WindUI = pcall(function()
    return loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()
end)

if not success then
    error("Failed to load WindUI: " .. WindUI)
end
print("WindUI loaded successfully!")

-- Create a window
local Window = WindUI:CreateWindow({
    Title = "Script UI", -- UI Title
    Icon = "folder", -- Icon for the window
    Author = "97rn", -- Author name
    Folder = "ScriptConfig", -- Folder for saving settings
    Size = UDim2.fromOffset(580, 460), -- Window size
    KeySystem = { -- Key system (optional)
        Key = "1234", -- Default key
        Note = "The Key is 1234", -- Note for the key
        URL = "https://github.com/Footagesus/WindUI", -- URL for key (e.g., Discord)
        SaveKey = true, -- Save the key
    },
    Transparent = true, -- Transparent background
    Theme = "Dark", -- UI theme
    SideBarWidth = 170, -- Sidebar width
    HasOutline = true, -- Add outlines
})

print("Window created successfully!")

-- Create tabs
local Tab1 = Window:Tab({
    Title = "Main",
    Icon = "folder",
})

local Tab2 = Window:Tab({
    Title = "Reach",
    Icon = "folder",
})

local Tab3 = Window:Tab({
    Title = "Abilities",
    Icon = "folder",
})

local Tab4 = Window:Tab({
    Title = "GK React",
    Icon = "folder",
})

print("Tabs loaded successfully!")

-- Variables
local gkreact = false
local gkdistance = 20
local power = false
local blue = false
local player = game.Players.LocalPlayer
local legreach = false
local LegdistanceThreshold = 1
local armreach = false
local ArmdistanceThreshold = 1
local headreach = false
local HeaddistanceThreshold = 1
local chestreach = false
local ChestdistanceThreshold = 1
local leftLeg, rightLeg, ball, head, chest, leftArm, rightArm

-- Character Setup
local function setupCharacter()
    local char = player.Character or player.CharacterAdded:Wait()
    leftLeg = char:WaitForChild("Left Leg") or char:WaitForChild("LeftFoot")
    rightLeg = char:WaitForChild("Right Leg") or char:WaitForChild("RightFoot")
    ball = workspace.TPSSystem.TPS
    rightArm = char:WaitForChild("Right Arm") or char:WaitForChild("RightHand")
    leftArm = char:WaitForChild("Left Arm") or char:WaitForChild("LeftHand")
    head = char:WaitForChild("Head")
    chest = char:WaitForChild("Torso") or char:WaitForChild("UpperTorso")
    print("Character setup complete!")
end

setupCharacter()
player.CharacterAdded:Connect(setupCharacter)

-- Functions for Reach Checks
local function checkLegs()
    while legreach do
        task.wait(0)
        local distanceToLeftLeg = (ball.Position - leftLeg.Position).Magnitude
        local distanceToRightLeg = (ball.Position - rightLeg.Position).Magnitude

        if distanceToLeftLeg <= LegdistanceThreshold then
            firetouchinterest(leftLeg, ball, 0)
            firetouchinterest(leftLeg, ball, 1)
        end

        if distanceToRightLeg <= LegdistanceThreshold then
            firetouchinterest(rightLeg, ball, 0)
            firetouchinterest(rightLeg, ball, 1)
        end
    end
end

local function checkArms()
    while armreach do
        task.wait(0)
        local distanceToLeftArm = (ball.Position - leftArm.Position).Magnitude
        local distanceToRightArm = (ball.Position - rightArm.Position).Magnitude

        if distanceToLeftArm <= ArmdistanceThreshold then
            firetouchinterest(leftArm, ball, 0)
            firetouchinterest(leftArm, ball, 1)
        end

        if distanceToRightArm <= ArmdistanceThreshold then
            firetouchinterest(rightArm, ball, 0)
            firetouchinterest(rightArm, ball, 1)
        end
    end
end

local function checkHead()
    while headreach do
        task.wait(0)
        local distanceToHead = (ball.Position - head.Position).Magnitude

        if distanceToHead <= HeaddistanceThreshold then
            firetouchinterest(head, ball, 0)
            firetouchinterest(head, ball, 1)
        end
    end
end

local function checkChest()
    while chestreach do
        task.wait(0)
        local distanceToChest = (ball.Position - chest.Position).Magnitude

        if distanceToChest <= ChestdistanceThreshold then
            firetouchinterest(chest, ball, 0)
            firetouchinterest(chest, ball, 1)
        end
    end
end

-- Blue Flames and Power Shot Loops
local function blueFlamesLoop()
    while true do
        if blue then
            player.Backpack.FValue.Value = 10
        end
        task.wait(0.1)
    end
end

local function powerShotLoop()
    while true do
        if power then
            player.Backpack.PowerActive.Value = true
        end
        task.wait(0.1)
    end
end

task.spawn(blueFlamesLoop)
task.spawn(powerShotLoop)

-- GK React System
local isTouchingFix = false

local function setupTouchDetection()
    local function onTouch(part)
        if part:IsDescendantOf(player.Character) then
            isTouchingFix = true
        end
    end

    local function onTouchEnd(part)
        if part:IsDescendantOf(player.Character) then
            isTouchingFix = false
        end
    end

    workspace.GKSystem.Fix1.Touched:Connect(onTouch)
    workspace.GKSystem.Fix2.Touched:Connect(onTouch)
    workspace.GKSystem.Fix1.TouchEnded:Connect(onTouchEnd)
    workspace.GKSystem.Fix2.TouchEnded:Connect(onTouchEnd)
end

local function gkReact()
    while gkreact do
        task.wait(0)
        if isTouchingFix then
            local distanceToRightGK = (ball.Position - rightLeg.Position).Magnitude

            if distanceToRightGK <= gkdistance then
                local args = {
                    [1] = workspace.TPSSystem.TPS,
                    [2] = game:GetService("Players").LocalPlayer.Character:FindFirstChild("Right Leg")
                }

                workspace.FE.Actions.SaveRL:FireServer(unpack(args))
            end
        end
    end
end

setupTouchDetection()

-- UI Elements
Tab1:Toggle({
    Title = "Leg Toggle",
    Desc = "Toggle leg reach",
    Value = legreach,
    Callback = function(state)
        legreach = state
        if state then
            checkLegs()
        end
        print("Leg Toggle:", state)
    end
})

Tab1:Slider({
    Title = "Leg Distance",
    Step = 1,
    Value = {
        Min = 1,
        Max = 50,
        Default = LegdistanceThreshold,
    },
    Callback = function(value)
        LegdistanceThreshold = value
        print("Leg Distance:", value)
    end
})

Tab1:Toggle({
    Title = "Arms Toggle",
    Desc = "Toggle arm reach",
    Value = armreach,
    Callback = function(state)
        armreach = state
        if state then
            checkArms()
        end
        print("Arms Toggle:", state)
    end
})

Tab1:Slider({
    Title = "Arms Distance",
    Step = 1,
    Value = {
        Min = 1,
        Max = 50,
        Default = ArmdistanceThreshold,
    },
    Callback = function(value)
        ArmdistanceThreshold = value
        print("Arms Distance:", value)
    end
})

Tab2:Toggle({
    Title = "Head Toggle",
    Desc = "Toggle head reach",
    Value = headreach,
    Callback = function(state)
        headreach = state
        if state then
            checkHead()
        end
        print("Head Toggle:", state)
    end
})

Tab2:Slider({
    Title = "Head Distance",
    Step = 1,
    Value = {
        Min = 1,
        Max = 50,
        Default = HeaddistanceThreshold,
    },
    Callback = function(value)
        HeaddistanceThreshold = value
        print("Head Distance:", value)
    end
})

Tab2:Toggle({
    Title = "Chest Toggle",
    Desc = "Toggle chest reach",
    Value = chestreach,
    Callback = function(state)
        chestreach = state
        if state then
            checkChest()
        end
        print("Chest Toggle:", state)
    end
})

Tab2:Slider({
    Title = "Chest Distance",
    Step = 1,
    Value = {
        Min = 1,
        Max = 50,
        Default = ChestdistanceThreshold,
    },
    Callback = function(value)
        ChestdistanceThreshold = value
        print("Chest Distance:", value)
    end
})

Tab3:Toggle({
    Title = "Power Shot",
    Desc = "Toggle power shot",
    Value = power,
    Callback = function(state)
        power = state
        print("Power Shot:", state)
    end
})

Tab3:Toggle({
    Title = "Blue Flames",
    Desc = "Toggle blue flames",
    Value = blue,
    Callback = function(state)
        blue = state
        print("Blue Flames:", state)
    end
})

Tab4:Toggle({
    Title = "GK React",
    Desc = "Toggle GK react",
    Value = gkreact,
    Callback = function(state)
        gkreact = state
        if state then
            gkReact()
        end
        print("GK React:", state)
    end
})

Tab4:Slider({
    Title = "GK Distance",
    Step = 1,
    Value = {
        Min = 1,
        Max = 50,
        Default = gkdistance,
    },
    Callback = function(value)
        gkdistance = value
        print("GK Distance:", value)
    end
})

print("working!")
